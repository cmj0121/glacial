# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#
fastlane_require 'dotenv'

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

# Load environment variables from .env file, or raise an error if not found
def required_env(key)
  value = ENV[key]
  raise "Missing environment variable: #{key}" if value.nil? || value.empty?
  puts "#{key}: #{value}"
end

platform :ios do
  desc "Build the iOS APP to TestFlight"
  lane :build do |options|
    setup_ci
    match(type: "appstore", app_identifier: ENV["APP_IDENTIFIER"], readonly: true)

    sh 'cd .. && flutter pub get'
    cocoapods

    increment_build_number(build_number: latest_testflight_build_number + 1)
    build_app(
      workspace: "Runner.xcworkspace",
      scheme: "Runner",
    )
  end

  desc "Upload the build to AppStore Connect"
  lane :release do |options|
    build
    testflight(skip_waiting_for_build_processing: true)
  end

  desc "Run the end-to-end (E2E) tests"
  lane :e2e do
    # find the device by the command `xcrun simctl list devices`
    devices = ["iPad mini (6th generation)", "iPhone 16 Plus"]

    # define the function to run the test script with take the screenshots
    def run_test(device, script)
      begin
        record_pid = spawn("xcrun simctl io booted recordVideo --force 'screenshots/#{device}/#{script}.mov'")
        sh "flutter test 'integration_test/#{script}.dart' --device-id='#{device}'"
      ensure
        Process.kill("INT", record_pid)
        Process.wait(record_pid)
        exit_status = $?.exitstatus
        if exit_status != 0
          puts "E2E tests failed with exit status: #{exit_status}"
          raise "E2E tests failed"
        end
      end
    end


    Dir.chdir "../.." do
      for device in devices
        sh "xcrun simctl shutdown all"
        sh "xcrun simctl boot '#{device}'"
        sh "open -a Simulator"
        sh "mkdir -p 'screenshots/#{device}'"

        begin
          run_test(device, "app_switch_server")
          run_test(device, "app_trends")
        ensure
         sh "xcrun simctl shutdown '#{device}'"
         sh "xcrun simctl erase '#{device}'"
        end

      end
    end
  end
end

# vim: ts=2 sw=2 ft=ruby et :
