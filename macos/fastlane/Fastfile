# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:mac)

# Load environment variables from .env file, or raise an error if not found
def required_env(key)
  value = ENV[key]
  raise "Missing environment variable: #{key}" if value.nil? || value.empty?
  puts "#{key}: #{value}"
end

platform :mac do
  desc "Bump the build version"
  lane :bump_version do
      build_number = latest_testflight_build_number(
        app_identifier: ENV["APP_IDENTIFIER"],
        platform: "osx",
        username: ENV["APPLE_ID"],
      )
      UI.message("ðŸš€ Latest TestFlight build number is #{build_number}")

      pubspec_path = "../../pubspec.yaml"
      content = File.read(pubspec_path)
      # Match "version: x.y.z+build"
      version_line = content.match(/^version:\s*\d+\.\d+\.\d+\+(\d+)$/)
      if version_line
        current_build = version_line[1].to_i
        new_build = current_build + 1
        new_version_line = "#{version_line[0].split('+')[0]}+#{new_build}"
        content.sub!(version_line[0], new_version_line)
        File.write(pubspec_path, content)
        UI.message("ðŸ“¦ Bumped build number to #{new_build} in #{pubspec_path}")
      else
        UI.error("Could not find version line in #{pubspec_path}")
      end

      # Now git add and commit the changes
      sh("git add #{pubspec_path}")
      sh("git commit -m '[AUTO] bump build number to #{new_build}'")
  end

  desc "Push a new beta build to TestFlight"
  lane :build do
    match(
      type: "appstore",
      platform: "macos",
      app_identifier: ENV["APP_IDENTIFIER"],
      additional_cert_types: ["mac_installer_distribution"],
      readonly: true,
    )

    Dir.chdir "../.." do
      sh("flutter pub get")
      sh("flutter clean")
      sh("flutter build macos --release")
    end

    build_app(
      workspace: "Runner.xcworkspace",
      scheme: "Runner",
    )
  end

  desc "Upload the build to AppStore Connect"
  lane :release do |options|
    build
    testflight(skip_waiting_for_build_processing: true)
  end

  desc "Run the end-to-end (E2E) tests"
  lane :e2e do
    Dir.chdir "../.." do
      sh "flutter test integration_test/app_switch_server.dart --device-id=macos"
      sh "flutter test integration_test/app_trends.dart        --device-id=macos"
      sh "flutter test integration_test/app_timeline.dart      --device-id=macos"
    end
  end
end

# vim: ts=2 sw=2 ft=ruby et :
